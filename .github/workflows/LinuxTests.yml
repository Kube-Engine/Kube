name: Linux Tests

on: [push]

jobs:
  TestsCoverage:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Update apt
      run: sudo apt-get update

    - name: Install ninja toolchain
      run: sudo apt-get install -y ninja-build

    - name: Install lcov
      run: sudo apt-get install -y lcov

    - name: Install google test
      run: sudo apt-get install -y libgtest-dev

    - name: Install SDL2
      run: sudo apt-get install -y libsdl2-2.0-0 libsdl2-dev

    - name: Install Vulkan
      run: sudo apt-get install -y libvulkan-dev libvulkan1 mesa-vulkan-drivers vulkan-tools vulkan-utils vulkan-validationlayers vulkan-validationlayers-dev

    - name: Build
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      run: make coverage

    # Core
    - name: Run Core tests
      id: CoreTests
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      continue-on-error: true
      run: |
        make run_core_coverage
        if [ $? = 0 ]; then
          echo "::set-output name=Coverage::$(echo $(lcov -l coverage.info | tail -n 1 | cut -f2 -d '|' | awk '{$1=$1;print}' | cut -f1 -d ' '))"
          echo "::set-output name=Color::green"
        else
          echo "::set-output name=Coverage::Failure"
          echo "::set-output name=Color::red"
        fi

    - name: Upload Core coverage
      uses: RubbaBoy/BYOB@v1.2.0
      with:
        NAME: CoreCoverage
        LABEL: 'Coverage'
        STATUS: ${{ steps.CoreTests.outputs.Coverage }}
        COLOR: blue
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Meta
    - name: Run Meta tests
      id: MetaTests
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      continue-on-error: true
      run: |
        make run_meta_coverage
        if [ $? = 0 ]; then
          echo "::set-output name=Coverage::$(echo $(lcov -l coverage.info | tail -n 1 | cut -f2 -d '|' | awk '{$1=$1;print}' | cut -f1 -d ' '))"
          echo "::set-output name=Color::green"
        else
          echo "::set-output name=Coverage::Failure"
          echo "::set-output name=Color::red"
        fi

    - name: Upload Meta coverage
      uses: RubbaBoy/BYOB@v1.2.0
      with:
        NAME: MetaCoverage
        LABEL: 'Coverage'
        STATUS: ${{ steps.MetaTests.outputs.Coverage }}
        COLOR: blue
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Flow
    - name: Run Flow tests
      id: FlowTests
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      continue-on-error: true
      run: |
        make run_flow_coverage
        if [ $? = 0 ]; then
          echo "::set-output name=Coverage::$(echo $(lcov -l coverage.info | tail -n 1 | cut -f2 -d '|' | awk '{$1=$1;print}' | cut -f1 -d ' '))"
          echo "::set-output name=Color::green"
        else
          echo "::set-output name=Coverage::Failure"
          echo "::set-output name=Color::red"
        fi

    - name: Upload Flow coverage
      uses: RubbaBoy/BYOB@v1.2.0
      with:
        NAME: FlowCoverage
        LABEL: 'Coverage'
        STATUS: ${{ steps.FlowTests.outputs.Coverage }}
        COLOR: blue
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Graphics
    - name: Run Graphics tests
      id: GraphicsTests
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      continue-on-error: true
      run: |
        make run_graphics_coverage
        if [ $? = 0 ]; then
          echo "::set-output name=Coverage::$(echo $(lcov -l coverage.info | tail -n 1 | cut -f2 -d '|' | awk '{$1=$1;print}' | cut -f1 -d ' '))"
          echo "::set-output name=Color::green"
        else
          echo "::set-output name=Coverage::Failure"
          echo "::set-output name=Color::red"
        fi

    - name: Upload Graphics coverage
      uses: RubbaBoy/BYOB@v1.2.0
      with:
        NAME: GraphicsCoverage
        LABEL: 'Coverage'
        STATUS: ${{ steps.GraphicsTests.outputs.Coverage }}
        COLOR: blue
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Object
    - name: Run Objects tests
      id: ObjectsTests
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      continue-on-error: true
      run: |
        make run_object_coverage
        if [ $? = 0 ]; then
          echo "::set-output name=Coverage::$(echo $(lcov -l coverage.info | tail -n 1 | cut -f2 -d '|' | awk '{$1=$1;print}' | cut -f1 -d ' '))"
          echo "::set-output name=Color::green"
        else
          echo "::set-output name=Coverage::Failure"
          echo "::set-output name=Color::red"
        fi

    - name: Upload Objects coverage
      uses: RubbaBoy/BYOB@v1.2.0
      with:
        NAME: ObjectsCoverage
        LABEL: 'Coverage'
        STATUS: ${{ steps.ObjectsTests.outputs.Coverage }}
        COLOR: blue
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # ECS
    - name: Run ECS tests
      id: ECSTests
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      continue-on-error: true
      run: |
        make run_ecs_coverage
        if [ $? = 0 ]; then
          echo "::set-output name=Coverage::$(echo $(lcov -l coverage.info | tail -n 1 | cut -f2 -d '|' | awk '{$1=$1;print}' | cut -f1 -d ' '))"
          echo "::set-output name=Color::green"
        else
          echo "::set-output name=Coverage::Failure"
          echo "::set-output name=Color::red"
        fi

    - name: Upload ECS coverage
      uses: RubbaBoy/BYOB@v1.2.0
      with:
        NAME: ECSCoverage
        LABEL: 'Coverage'
        STATUS: ${{ steps.ECSTests.outputs.Coverage }}
        COLOR: blue
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # UI
    - name: Run UI tests
      id: UITests
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      continue-on-error: true
      run: |
        make run_ui_coverage
        if [ $? = 0 ]; then
          echo "::set-output name=Coverage::$(echo $(lcov -l coverage.info | tail -n 1 | cut -f2 -d '|' | awk '{$1=$1;print}' | cut -f1 -d ' '))"
          echo "::set-output name=Color::green"
        else
          echo "::set-output name=Coverage::Failure"
          echo "::set-output name=Color::red"
        fi

    - name: Upload UI coverage
      uses: RubbaBoy/BYOB@v1.2.0
      with:
        NAME: UICoverage
        LABEL: 'Coverage'
        STATUS: ${{ steps.UITests.outputs.Coverage }}
        COLOR: blue
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Widgets
    - name: Run Widgets tests
      id: WidgetsTests
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      continue-on-error: true
      run: |
        make run_widgets_coverage
        if [ $? = 0 ]; then
          echo "::set-output name=Coverage::$(echo $(lcov -l coverage.info | tail -n 1 | cut -f2 -d '|' | awk '{$1=$1;print}' | cut -f1 -d ' '))"
          echo "::set-output name=Color::green"
        else
          echo "::set-output name=Coverage::Failure"
          echo "::set-output name=Color::red"
        fi

    - name: Upload Widgets coverage
      uses: RubbaBoy/BYOB@v1.2.0
      with:
        NAME: WidgetsCoverage
        LABEL: 'Coverage'
        STATUS: ${{ steps.WidgetsTests.outputs.Coverage }}
        COLOR: blue
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Voxel
    - name: Run Voxel tests
      id: VoxelTests
      working-directory: ${{github.workspace}}
      shell: bash
      env:
        CC:  gcc-10
        CXX: g++-10
      continue-on-error: true
      run: |
        make run_voxel_coverage
        if [ $? = 0 ]; then
          echo "::set-output name=Coverage::$(echo $(lcov -l coverage.info | tail -n 1 | cut -f2 -d '|' | awk '{$1=$1;print}' | cut -f1 -d ' '))"
          echo "::set-output name=Color::green"
        else
          echo "::set-output name=Coverage::Failure"
          echo "::set-output name=Color::red"
        fi

    - name: Upload Voxel coverage
      uses: RubbaBoy/BYOB@v1.2.0
      with:
        NAME: VoxelCoverage
        LABEL: 'Coverage'
        STATUS: ${{ steps.VoxelTests.outputs.Coverage }}
        COLOR:  blue
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
